USE DEMO;
create table PRODUCTOS (
CODPRODUCTO varchar(10),
DESCRIPCION varchar(50),
EXISTENCIA decimal(18,0),
primary key (CODPRODUCTO)
);                   
create table USUARIOS (
USUARIOID varchar(10),
USUARIO varchar(50),
CLAVE decimal(18,0),
primary key (USUARIOID)
); 
insert into USUARIOS value( 'Naza','5055');
Select CLAVE from USUARIOS where USUARIOID = '1';

CREATE TABLE USUARIOS (
    USUARIOID VARCHAR(50) NOT NULL PRIMARY KEY, 
    CLAVE VARCHAR(255) NOT NULL
);


select * from CLIENTES;
SHOW PROCEDURE STATUS WHERE name = 'spObtenerCliente';
CALL spObtenerCliente('1');
DELIMITER $$

CREATE PROCEDURE spObtenerCliente(IN p_codigoCliente VARCHAR(10))
BEGIN
    SELECT * FROM CLIENTES WHERE CODCLIENTE = p_codigoCliente;
END $$

DELIMITER ;


INSERT INTO CLIENTES VALUES ('1','MARY','HERNANDEZ');
create table CLIENTES (
CODCLIENTE varchar(10),
NOMBRE varchar(50), 
APELLIDO varchar (50),
primary key (CODCLIENTE)
);


DELIMITER $$

CREATE PROCEDURE spModificarCliente(
    IN p_CODCLIENTE VARCHAR(10),
    IN p_NOMBRE VARCHAR(50),
    IN p_APELLIDO VARCHAR(50)
)
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = p_NOMBRE,
        APELLIDO = p_APELLIDO
    WHERE CODCLIENTE = p_CODCLIENTE;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE spBorrarCliente(
    IN p_CODCLIENTE VARCHAR(10)
)
BEGIN
    DELETE FROM CLIENTES
    WHERE CODCLIENTE = p_CODCLIENTE;
END$$

DELIMITER ;


create table COMPRAS (
CODCOMPRA varchar(10),
CODPROVEEDOR varchar(10), 
CODPRODUCTO varchar (10),
FECHA date,
CANTIDAD decimal(18,0),
primary key (CODCOMPRA)
);

create table BITACORA (
USUARIO varchar(50),
FECHAHORA datetime(0), 
REGISTRO varchar (10),
TABLA varchar(50),
OPERACION varchar(50)
);
create table VENTAS (
CODVENTA varchar(10),
CODCLIENTE varchar(10), 
CODPRODUCTO varchar (10),
FECHA date,
CANTIDAD decimal(18, 0),
primary key (CODVENTA)
);

DROP PROCEDURE IF EXISTS spObtenerCliente;

DELIMITER $$

CREATE PROCEDURE spObtenerCliente(IN codigoCliente VARCHAR(10))
BEGIN
    IF codigoCliente IS NULL OR codigoCliente = '' THEN
        SELECT CODCLIENTE, NOMBRE, APELLIDO FROM CLIENTES;
    ELSE
        SELECT CODCLIENTE, NOMBRE, APELLIDO FROM CLIENTES WHERE CODCLIENTE = codigoCliente;
    END IF;
END$$

DELIMITER ;

ALTER TABLE COMPRAS ADD CONSTRAINT FK_PROV_COMPRAS FOREIGN KEY (CODPROVEEDOR) 
REFERENCES PROVEEDORES (CODPROVEEDOR);

ALTER TABLE VENTAS ADD CONSTRAINT FK_CLIENTES_VENTAS FOREIGN KEY (CODCLIENTE) 
REFERENCES CLIENTES (CODCLIENTE);

ALTER TABLE COMPRAS ADD CONSTRAINT FK_PROD_COMPRAS FOREIGN KEY (CODPRODUCTO) 
REFERENCES PRODUCTOS (CODPRODUCTO);

ALTER TABLE VENTAS  ADD CONSTRAINT FK_PROD_VENTAS FOREIGN KEY (CODPRODUCTO) 
REFERENCES PRODUCTOS (CODPRODUCTO);

-- 01. Procedimientos Almacenados de la Base de Datos

-- Procedimiento para insertar un producto INSERTAR PRODUCTO = INSERTAR_PROD
DELIMITER $$
CREATE PROCEDURE INSERTAR_PROD(
    IN p_CodProducto VARCHAR(10),
    IN p_Descripcion VARCHAR(50),
    IN p_Existencia DECIMAL(18, 0)
)
BEGIN
    INSERT INTO PRODUCTOS (CODPRODUCTO, DESCRIPCION, EXISTENCIA)
    VALUES (p_CodProducto, p_Descripcion, p_Existencia);
END$$
DELIMITER ;

-- Procedimiento para insertar un cliente = INSERT_CLIENTE
DELIMITER $$
CREATE PROCEDURE INSERT_CLIENTE(
    IN p_CodCliente VARCHAR(10),
    IN p_Nombre VARCHAR(50),
    IN p_Apellido VARCHAR(50)
)
BEGIN
    INSERT INTO CLIENTES (CODCLIENTE, NOMBRE, APELLIDO)
    VALUES (p_CodCliente, p_Nombre, p_Apellido);
END$$
DELIMITER ;

-- Procedimiento para insertar un proveedor = INSERT_PROV
DELIMITER $$
CREATE PROCEDURE INSERT_PROV(
    IN p_CodProv VARCHAR(10),
    IN p_Nombre VARCHAR(50)
)
BEGIN
    INSERT INTO PROVEEDORES (CODPROVEEDOR, NOMBRE)
    VALUES (p_CodProv, p_Nombre);
END$$
DELIMITER ;

-- 02. Función que devuelve la DESCRIPCIÓN de un producto dado el Código del mismo OBT_DES = OBTENER DESCRIPCION
DELIMITER $$
CREATE FUNCTION OBT_DES(
    f_CodProducto VARCHAR(10)
) RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE descripcion VARCHAR(50);
    SELECT DESCRIPCION INTO descripcion
    FROM PRODUCTOS
    WHERE CODPRODUCTO = f_CodProducto;
    RETURN descripcion;
END$$
DELIMITER ;

-- 03. Función que devuelve el nombre completo del Cliente dado el código de la Venta OBT_NCLIENTE
DELIMITER $$
CREATE FUNCTION OBT_NCLIENTE(
    f_CodVenta VARCHAR(10)
) RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
    DECLARE NCOMPLETO VARCHAR(100);
    SELECT CONCAT(CLIENTES.NOMBRE, ' ', CLIENTES.APELLIDO) INTO NCOMPLETO
    FROM CLIENTES
    JOIN VENTAS ON CLIENTES.CODCLIENTE = VENTAS.CODCLIENTE
    WHERE VENTAS.CODVENTA = p_CodVenta;
    RETURN NCOMPLETO;
END$$
DELIMITER ;

-- 04. Función que devuelve el nombre del Proveedor dado el código de la Compra 
DELIMITER $$
CREATE FUNCTION OBT_NPROVEEDOR(
    f_CodCompra VARCHAR(10)
) RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE nproveedor VARCHAR(50);
    SELECT PROVEEDORES.NOMBRE INTO nproveedor
    FROM PROVEEDORES
    JOIN COMPRAS ON PROVEEDORES.CODPROVEEDOR = COMPRAS.CODPROVEEDOR
    WHERE COMPRAS.CODCOMPRA = p_CodCompra;
    RETURN nproveedor;
END$$
DELIMITER ;

-- 05. Trigger que descuenta las Existencias de productos al ingresar una Venta
DELIMITER $$
CREATE TRIGGER Descontar_Exis_Venta
AFTER INSERT ON VENTAS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTOS
    SET EXISTENCIA = EXISTENCIA - NEW.CANTIDAD
    WHERE CODPRODUCTO = NEW.CODPRODUCTO;
END$$
DELIMITER ;

-- 06. Trigger que incrementa las Existencias de productos al ingresar una Compra
DELIMITER $$
CREATE TRIGGER Incrementar_Exis_Compra
AFTER INSERT ON COMPRAS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTOS
    SET EXISTENCIA = EXISTENCIA + NEW.CANTIDAD
    WHERE CODPRODUCTO = NEW.CODPRODUCTO;
END$$
DELIMITER ;

-- 07. Triggers para generar un registro en la BITACORA al ingresar, modificar o borrar un Cliente

-- Trigger para INSERT 
DELIMITER $$
CREATE TRIGGER BITACORA_IMB_CLIENTE
AFTER INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO BITACORA (USUARIO, FECHAHORA, REGISTRO, TABLA, OPERACION)
    VALUES (USER(), NOW(), NEW.CODCLIENTE, 'CLIENTES', 'INSERT');
END$$
DELIMITER ;

-- Trigger para UPDATE (BITACORA_BCLIENTE = BORRA CLIENTE)
DELIMITER $$
CREATE TRIGGER BITACORA_BCLIENTE
AFTER UPDATE ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO BITACORA (USUARIO, FECHAHORA, REGISTRO, TABLA, OPERACION)
    VALUES (USER(), NOW(), NEW.CODCLIENTE, 'CLIENTES', 'UPDATE');
END$$
DELIMITER ;

-- Trigger para DELETE (BITACORA_DCLIENTE = BITACORA BORRAR CLIENTE)
DELIMITER $$
CREATE TRIGGER BITACORA_DCLIENTE
AFTER DELETE ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO BITACORA (USUARIO, FECHAHORA, REGISTRO, TABLA, OPERACION)
    VALUES (USER(), NOW(), OLD.CODCLIENTE, 'CLIENTES', 'DELETE');
END$$
DELIMITER ;




-- ------------------------------------------------------------------------------------------------------- VENTAS
select*from ventas;
ventas 
DELIMITER $$
CREATE PROCEDURE spInsertarVenta(
    IN p_CODVENTA VARCHAR(10),
    IN p_CODCLIENTE VARCHAR(10),
    IN p_CODPRODUCTO VARCHAR(10),
    IN p_FECHA DATE,
    IN p_CANTIDAD DECIMAL(18, 0)
)
BEGIN
    INSERT INTO VENTAS (CODVENTA, CODCLIENTE, CODPRODUCTO, FECHA, CANTIDAD)
    VALUES (p_CODVENTA, p_CODCLIENTE, p_CODPRODUCTO, p_FECHA, p_CANTIDAD);
END $$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spModificarVenta(
    IN p_CODVENTA VARCHAR(10),
    IN p_CODCLIENTE VARCHAR(10),
    IN p_CODPRODUCTO VARCHAR(10),
    IN p_FECHA DATE,
    IN p_CANTIDAD DECIMAL(18, 0)
)
BEGIN
    UPDATE VENTAS
    SET CODCLIENTE = p_CODCLIENTE,
        CODPRODUCTO = p_CODPRODUCTO,
        FECHA = p_FECHA,
        CANTIDAD = p_CANTIDAD
    WHERE CODVENTA = p_CODVENTA;
END $$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spBorrarVenta(
    IN p_CODVENTA VARCHAR(10)
)
BEGIN
    DELETE FROM VENTAS WHERE CODVENTA = p_CODVENTA;
END $$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spObtenerVenta(
    IN p_CODVENTA VARCHAR(10)
)
BEGIN
    -- Si el parámetro p_CODVENTA está vacío o es NULL, se obtienen todas las ventas
    IF p_CODVENTA IS NULL OR p_CODVENTA = '' THEN
        SELECT * FROM VENTAS;
    ELSE
        SELECT * FROM VENTAS WHERE CODVENTA = p_CODVENTA;
    END IF;
END $$
DELIMITER ;


-- ----------------------------------- compras 
create table COMPRAS (
CODCOMPRA varchar(10),
CODPROVEEDOR varchar(10), 
CODPRODUCTO varchar (10),
FECHA date,
CANTIDAD decimal(18,0),
primary key (CODCOMPRA)
);

select*from ventas;

DELIMITER $$
CREATE PROCEDURE INSERT_Compras(
    IN pCODCOMPRA VARCHAR(10),
    IN pCODPROVEEDOR VARCHAR(10),
    IN pCODPRODUCTO VARCHAR(10),
    IN pFECHA DATE,
    IN pCANTIDAD DECIMAL(18,0)
)
BEGIN
    INSERT INTO COMPRAS (CODCOMPRA, CODPROVEEDOR, CODPRODUCTO, FECHA, CANTIDAD)
    VALUES (pCODCOMPRA, pCODPROVEEDOR, pCODPRODUCTO, pFECHA, pCANTIDAD);
END $$
DELIMITER ;
DELIMITER $$

CREATE PROCEDURE spBorrarCompras(IN pCODCOMPRA VARCHAR(10))
BEGIN
    DELETE FROM COMPRAS
    WHERE CODCOMPRA = pCODCOMPRA;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE spModificarCompras(
    IN pCODCOMPRA VARCHAR(10),
    IN pCODPROVEEDOR VARCHAR(10),
    IN pCODPRODUCTO VARCHAR(10),
    IN pFECHA DATE,
    IN pCANTIDAD DECIMAL(18,0)
)
BEGIN
    UPDATE COMPRAS
    SET CODPROVEEDOR = pCODPROVEEDOR,
        CODPRODUCTO = pCODPRODUCTO,
        FECHA = pFECHA,
        CANTIDAD = pCANTIDAD
    WHERE CODCOMPRA = pCODCOMPRA;
END $$

DELIMITER ;


DELIMITER $$
CREATE PROCEDURE spObtenerCompras(IN pCODCOMPRA VARCHAR(10))
BEGIN
    IF pCODCOMPRA != '' THEN
        SELECT * FROM COMPRAS WHERE CODCOMPRA = pCODCOMPRA;
    ELSE
        SELECT * FROM COMPRAS;
    END IF;
END $$
DELIMITER ;

-- ------------------------------------- PRODUCTO
-- Crear la tabla "productos"
CREATE TABLE productos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT,
    precio DECIMAL(10, 2) NOT NULL,
    cantidad_en_stock INT NOT NULL,
    fecha_caducidad DATE,
    id_categoria INT,
    id_laboratorio INT,
    FOREIGN KEY (id_categoria) REFERENCES categorias(id),
    FOREIGN KEY (id_laboratorio) REFERENCES laboratorios(id)
);

select*from productos;
DELIMITER $$
CREATE PROCEDURE spBorrarProducto(
    IN p_CODPRODUCTO VARCHAR(10)
)
BEGIN
    DELETE FROM PRODUCTOS
    WHERE CODPRODUCTO = p_CODPRODUCTO;
END$$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spModificarProducto(
    IN p_CODPRODUCTO VARCHAR(10),
    IN p_DESCRIPCION VARCHAR(50),
     IN p_EXISTENCIA VARCHAR(50)
)
BEGIN
    UPDATE PRODUCTOS
    SET DESCRIPCION = p_DESCRIPCION,
    EXISTENCIA = p_EXISTENCIA
    WHERE CODPRODUCTO = p_CODPRODUCTO;
END$$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spObtenerProducto(IN p_codigoProducto VARCHAR(10))
BEGIN
    SELECT * FROM productos WHERE CODPRODUCTO = p_codigoProducto;
END $$
DELIMITER ;
-- Procedimiento para insertar un proveedor = INSERT_PROV
DELIMITER $$
CREATE PROCEDURE INSERT_PROD(
    IN p_CodProd VARCHAR(10),
    IN p_Descripcion VARCHAR(50),
    IN p_Existencia VARCHAR(50)
)
BEGIN
    INSERT INTO PRODUCTOS (CODPROVEEDOR, DESCRIPCION, EXISTENCIA)
    VALUES (p_CodProd, p_Descripcion, p_Ecistencia);
END$$
DELIMITER ;
DESCRIBE productos;
DELIMITER $$
CREATE PROCEDURE spObtenerProducto(IN p_codigoProducto VARCHAR(10))
BEGIN
    IF p_codigoProducto = '' THEN
        SELECT * FROM productos;
    ELSE
        SELECT * FROM productos WHERE CODPRODUCTO = p_codigoProducto;
    END IF;
END $$
DELIMITER ;
DROP PROCEDURE IF EXISTS spObtenerVenta;
-- proveedores--;
create table PROVEEDORES (
CODPROVEEDOR varchar(10),
NOMBRE varchar(50), 
primary key (CODPROVEEDOR)
);
select*from proveedores;

DELIMITER $$
CREATE PROCEDURE spBorrarProveedor(
    IN p_CODPROVEEDOR VARCHAR(10)
)
BEGIN
    DELETE FROM PROVEEDORES
    WHERE CODPROVEEDOR = p_CODPROVEEDOR;
END$$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spModificarProveedor(
    IN p_CODPROVEEDOR VARCHAR(10),
    IN p_NOMBRE VARCHAR(50)
)
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE = p_NOMBRE
    WHERE CODPROVEEDOR = p_CODPROVEEDOR;
END$$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE spObtenerProveedor(IN p_codigoProveedor VARCHAR(10))
BEGIN
    SELECT * FROM PROVEEDORES WHERE CODPROVEEDOR = p_codigoProveedor;
END $$
DELIMITER ;
-- Procedimiento para insertar un proveedor = INSERT_PROV
DELIMITER $$
CREATE PROCEDURE INSERT_PROV(
    IN p_CodProv VARCHAR(10),
    IN p_Nombre VARCHAR(50)
)
BEGIN
    INSERT INTO PROVEEDORES (CODPROVEEDOR, NOMBRE)
    VALUES (p_CodProv, p_Nombre);
END$$
DELIMITER ;
DESCRIBE PROVEEDORES;
DELIMITER $$
CREATE PROCEDURE spObtenerProveedor(IN p_codigoProveedor VARCHAR(10))
BEGIN
    IF p_codigoProveedor = '' THEN
        SELECT * FROM PROVEEDORES;
    ELSE
        SELECT * FROM PROVEEDORES WHERE CODPROVEEDOR = p_codigoProveedor;
    END IF;
END $$
DELIMITER ;
DROP PROCEDURE IF EXISTS spObtenerProveedor;



--------------------------------------------
ALTER TABLE proveedores
ADD COLUMN CODMUNICIPIO VARCHAR(10);


ALTER TABLE proveedores
ADD CONSTRAINT fk_municipio
FOREIGN KEY (CODMUNICIPIO) REFERENCES proveedores(CODMUNICIPIO);


DELIMITER //

CREATE PROCEDURE spObtenerTodosProveedores()
BEGIN
    SELECT CODPROVEEDOR, CODMUNICIPIO, NOMBRE
    FROM proveedores;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE spObtenerProveedorPorCodigo(IN p_CODPROVEEDOR VARCHAR(10))
BEGIN
    SELECT CODPROVEEDOR, CODMUNICIPIO, NOMBRE
    FROM proveedores
    WHERE CODPROVEEDOR = p_CODPROVEEDOR;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE spInsertarProveedor(
    IN p_CODPROVEEDOR VARCHAR(10),
    IN p_CODMUNICIPIO VARCHAR(10),
    IN p_NOMBRE VARCHAR(50)
)
BEGIN
    INSERT INTO proveedores (CODPROVEEDOR, CODMUNICIPIO, NOMBRE)
    VALUES (p_CODPROVEEDOR, p_CODMUNICIPIO, p_NOMBRE);
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE spActualizarProveedor(
    IN p_CODPROVEEDOR VARCHAR(10),
    IN p_CODMUNICIPIO VARCHAR(10),
    IN p_NOMBRE VARCHAR(50)
)
BEGIN
    UPDATE proveedores
    SET CODMUNICIPIO = p_CODMUNICIPIO, NOMBRE = p_NOMBRE
    WHERE CODPROVEEDOR = p_CODPROVEEDOR;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE spEliminarProveedor(IN p_CODPROVEEDOR VARCHAR(10))
BEGIN
    DELETE FROM proveedores
    WHERE CODPROVEEDOR = p_CODPROVEEDOR;
END //

DELIMITER ;








DELIMITER //
CREATE PROCEDURE spObtenerProveedorPorCodigo(IN msCodigo VARCHAR(5))
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO
    FROM CLIENTES
    WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE spObtenerTodosClientes()
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, 
    FROM CLIENTES;
END //
DELIMITER ;

select* from proveedores

SELECT CODPROVEEDOR, CODMUNICIPIO, NOMBRE
FROM proveedores
WHERE CODPROVEEDOR = '001';



-------------------------------------------------------

ALTER TABLE CLIENTES
ADD COLUMN CODMUNICIPIO VARCHAR(10);


ALTER TABLE CLIENTES
ADD CONSTRAINT fk_municipio
FOREIGN KEY (CODMUNICIPIO) REFERENCES MUNICIPIOS(CODMUNICIPIO);


DELIMITER //
CREATE PROCEDURE spInsertarCliente(IN msCodigo VARCHAR(5), IN msCodMunicipio VARCHAR(6), IN msNombre VARCHAR(100), IN msApellido VARCHAR(100))
BEGIN
    INSERT INTO CLIENTES (CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO)
    VALUES (msCodigo, msCodMunicipio, msNombre, msApellido);
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spModificarCliente(IN msCodigo VARCHAR(5), IN msCodMunicipio VARCHAR(6), IN msNombre VARCHAR(100), IN msApellido VARCHAR(100))
BEGIN
    UPDATE CLIENTES
    SET CODMUNICIPIO = msCodMunicipio, NOMBRE = msNombre, APELLIDO = msApellido
    WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spBorrarCliente(IN msCodigo VARCHAR(5))
BEGIN
    DELETE FROM CLIENTES WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE spObtenerCliente(IN msCodigo VARCHAR(5))
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO
    FROM CLIENTES
    WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE spObtenerTodosClientes()
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO
    FROM CLIENTES;
END //
DELIMITER ;

select * from clientes

-----------------------------------------------------------------------------------------
ALTER TABLE CLIENTES
ADD COLUMN CODMUNICIPIO VARCHAR(10);


ALTER TABLE CLIENTES
ADD CONSTRAINT fk_municipio
FOREIGN KEY (CODMUNICIPIO) REFERENCES MUNICIPIOS(CODMUNICIPIO);


DELIMITER //
CREATE PROCEDURE spInsertarCliente(IN msCodigo VARCHAR(5), IN msCodMunicipio VARCHAR(6), IN msNombre VARCHAR(100), IN msApellido VARCHAR(100))
BEGIN
    INSERT INTO CLIENTES (CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO)
    VALUES (msCodigo, msCodMunicipio, msNombre, msApellido);
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spModificarCliente(IN msCodigo VARCHAR(5), IN msCodMunicipio VARCHAR(6), IN msNombre VARCHAR(100), IN msApellido VARCHAR(100))
BEGIN
    UPDATE CLIENTES
    SET CODMUNICIPIO = msCodMunicipio, NOMBRE = msNombre, APELLIDO = msApellido
    WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spBorrarCliente(IN msCodigo VARCHAR(5))
BEGIN
    DELETE FROM CLIENTES WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE spObtenerCliente(IN msCodigo VARCHAR(5))
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO
    FROM CLIENTES
    WHERE CODCLIENTE = msCodigo;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE spObtenerTodosClientes()
BEGIN
    SELECT CODCLIENTE, CODMUNICIPIO, NOMBRE, APELLIDO
    FROM CLIENTES;
END //
DELIMITER ;

select * from clientes
---------------------------------------------------------------
CREATE TABLE MUNICIPIOS (
    CODMUNICIPIO VARCHAR(6) PRIMARY KEY,
    CODDEPARTAMENTO VARCHAR(6) NOT NULL,
    NOMBRE VARCHAR(255) NOT NULL,
    FOREIGN KEY (CODDEPARTAMENTO) REFERENCES DEPARTAMENTOS(CODDEPARTAMENTO)
);
DELIMITER //
CREATE PROCEDURE spInsertarMunicipio(IN msCodigo VARCHAR(6), IN msCodDepartamento VARCHAR(6), IN msNombre VARCHAR(255))
BEGIN
    INSERT INTO MUNICIPIOS (CODMUNICIPIO, CODDEPARTAMENTO, NOMBRE)
    VALUES (msCodigo, msCodDepartamento, msNombre);
END //
DELIMITER ;
DELIMITER //
CREATE PROCEDURE spModificarMunicipio(IN msCodigo VARCHAR(6), IN msCodDepartamento VARCHAR(6), IN msNombre VARCHAR(255))
BEGIN
    UPDATE MUNICIPIOS
    SET CODDEPARTAMENTO = msCodDepartamento, NOMBRE = msNombre
    WHERE CODMUNICIPIO = msCodigo;
END //
DELIMITER ;
DELIMITER //
CREATE PROCEDURE spBorrarMunicipio(IN msCodigo VARCHAR(6))
BEGIN
    DELETE FROM MUNICIPIOS WHERE CODMUNICIPIO = msCodigo;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spObtenerMunicipio(IN msCodigo VARCHAR(6))
BEGIN
    SELECT 
        MUNICIPIOS.CODMUNICIPIO, 
        DEPARTAMENTOS.NOMBRE AS DEPARTAMENTO, 
        MUNICIPIOS.NOMBRE
    FROM MUNICIPIOS
    JOIN DEPARTAMENTOS ON MUNICIPIOS.CODDEPARTAMENTO = DEPARTAMENTOS.CODDEPARTAMENTO
    WHERE MUNICIPIOS.CODMUNICIPIO = msCodigo;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE spObtenerTodosMunicipios()
BEGIN
    SELECT 
        MUNICIPIOS.CODMUNICIPIO, 
        DEPARTAMENTOS.NOMBRE AS DEPARTAMENTO, 
        MUNICIPIOS.NOMBRE
    FROM MUNICIPIOS
    JOIN DEPARTAMENTOS ON MUNICIPIOS.CODDEPARTAMENTO = DEPARTAMENTOS.CODDEPARTAMENTO;
END //
DELIMITER ;


CALL spObtenerTodosMunicipios('')



select * from municipios
